// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/provider/oci (interfaces: ComputeClient)

package testing

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/oracle/oci-go-sdk/v65/core"
)

// MockComputeClient is a mock of ComputeClient interface.
type MockComputeClient struct {
	ctrl     *gomock.Controller
	recorder *MockComputeClientMockRecorder
}

// MockComputeClientMockRecorder is the mock recorder for MockComputeClient.
type MockComputeClientMockRecorder struct {
	mock *MockComputeClient
}

// NewMockComputeClient creates a new mock instance.
func NewMockComputeClient(ctrl *gomock.Controller) *MockComputeClient {
	mock := &MockComputeClient{ctrl: ctrl}
	mock.recorder = &MockComputeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeClient) EXPECT() *MockComputeClientMockRecorder {
	return m.recorder
}

// AttachVolume mocks base method.
func (m *MockComputeClient) AttachVolume(arg0 context.Context, arg1 core.AttachVolumeRequest) (core.AttachVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolume", arg0, arg1)
	ret0, _ := ret[0].(core.AttachVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolume indicates an expected call of AttachVolume.
func (mr *MockComputeClientMockRecorder) AttachVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolume", reflect.TypeOf((*MockComputeClient)(nil).AttachVolume), arg0, arg1)
}

// DetachVolume mocks base method.
func (m *MockComputeClient) DetachVolume(arg0 context.Context, arg1 core.DetachVolumeRequest) (core.DetachVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", arg0, arg1)
	ret0, _ := ret[0].(core.DetachVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockComputeClientMockRecorder) DetachVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockComputeClient)(nil).DetachVolume), arg0, arg1)
}

// GetInstance mocks base method.
func (m *MockComputeClient) GetInstance(arg0 context.Context, arg1 core.GetInstanceRequest) (core.GetInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0, arg1)
	ret0, _ := ret[0].(core.GetInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockComputeClientMockRecorder) GetInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockComputeClient)(nil).GetInstance), arg0, arg1)
}

// GetVolumeAttachment mocks base method.
func (m *MockComputeClient) GetVolumeAttachment(arg0 context.Context, arg1 core.GetVolumeAttachmentRequest) (core.GetVolumeAttachmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeAttachment", arg0, arg1)
	ret0, _ := ret[0].(core.GetVolumeAttachmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeAttachment indicates an expected call of GetVolumeAttachment.
func (mr *MockComputeClientMockRecorder) GetVolumeAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeAttachment", reflect.TypeOf((*MockComputeClient)(nil).GetVolumeAttachment), arg0, arg1)
}

// LaunchInstance mocks base method.
func (m *MockComputeClient) LaunchInstance(arg0 context.Context, arg1 core.LaunchInstanceRequest) (core.LaunchInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchInstance", arg0, arg1)
	ret0, _ := ret[0].(core.LaunchInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchInstance indicates an expected call of LaunchInstance.
func (mr *MockComputeClientMockRecorder) LaunchInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchInstance", reflect.TypeOf((*MockComputeClient)(nil).LaunchInstance), arg0, arg1)
}

// ListImages mocks base method.
func (m *MockComputeClient) ListImages(arg0 context.Context, arg1 *string) ([]core.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", arg0, arg1)
	ret0, _ := ret[0].([]core.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockComputeClientMockRecorder) ListImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockComputeClient)(nil).ListImages), arg0, arg1)
}

// ListInstances mocks base method.
func (m *MockComputeClient) ListInstances(arg0 context.Context, arg1 *string) ([]core.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", arg0, arg1)
	ret0, _ := ret[0].([]core.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockComputeClientMockRecorder) ListInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockComputeClient)(nil).ListInstances), arg0, arg1)
}

// ListShapes mocks base method.
func (m *MockComputeClient) ListShapes(arg0 context.Context, arg1, arg2 *string) ([]core.Shape, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShapes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]core.Shape)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShapes indicates an expected call of ListShapes.
func (mr *MockComputeClientMockRecorder) ListShapes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShapes", reflect.TypeOf((*MockComputeClient)(nil).ListShapes), arg0, arg1, arg2)
}

// ListVnicAttachments mocks base method.
func (m *MockComputeClient) ListVnicAttachments(arg0 context.Context, arg1, arg2 *string) ([]core.VnicAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVnicAttachments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]core.VnicAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVnicAttachments indicates an expected call of ListVnicAttachments.
func (mr *MockComputeClientMockRecorder) ListVnicAttachments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVnicAttachments", reflect.TypeOf((*MockComputeClient)(nil).ListVnicAttachments), arg0, arg1, arg2)
}

// ListVolumeAttachments mocks base method.
func (m *MockComputeClient) ListVolumeAttachments(arg0 context.Context, arg1, arg2 *string) ([]core.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumeAttachments", arg0, arg1, arg2)
	ret0, _ := ret[0].([]core.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumeAttachments indicates an expected call of ListVolumeAttachments.
func (mr *MockComputeClientMockRecorder) ListVolumeAttachments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumeAttachments", reflect.TypeOf((*MockComputeClient)(nil).ListVolumeAttachments), arg0, arg1, arg2)
}

// TerminateInstance mocks base method.
func (m *MockComputeClient) TerminateInstance(arg0 context.Context, arg1 core.TerminateInstanceRequest) (core.TerminateInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateInstance", arg0, arg1)
	ret0, _ := ret[0].(core.TerminateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateInstance indicates an expected call of TerminateInstance.
func (mr *MockComputeClientMockRecorder) TerminateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateInstance", reflect.TypeOf((*MockComputeClient)(nil).TerminateInstance), arg0, arg1)
}
