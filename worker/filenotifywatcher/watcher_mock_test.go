// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/filenotifywatcher (interfaces: FileNotifyWatcher,FileWatcher)

// Package filenotifywatcher is a generated GoMock package.
package filenotifywatcher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileNotifyWatcher is a mock of FileNotifyWatcher interface.
type MockFileNotifyWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockFileNotifyWatcherMockRecorder
}

// MockFileNotifyWatcherMockRecorder is the mock recorder for MockFileNotifyWatcher.
type MockFileNotifyWatcherMockRecorder struct {
	mock *MockFileNotifyWatcher
}

// NewMockFileNotifyWatcher creates a new mock instance.
func NewMockFileNotifyWatcher(ctrl *gomock.Controller) *MockFileNotifyWatcher {
	mock := &MockFileNotifyWatcher{ctrl: ctrl}
	mock.recorder = &MockFileNotifyWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileNotifyWatcher) EXPECT() *MockFileNotifyWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockFileNotifyWatcher) Changes(arg0 string) (<-chan bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes", arg0)
	ret0, _ := ret[0].(<-chan bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Changes indicates an expected call of Changes.
func (mr *MockFileNotifyWatcherMockRecorder) Changes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockFileNotifyWatcher)(nil).Changes), arg0)
}

// MockFileWatcher is a mock of FileWatcher interface.
type MockFileWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockFileWatcherMockRecorder
}

// MockFileWatcherMockRecorder is the mock recorder for MockFileWatcher.
type MockFileWatcherMockRecorder struct {
	mock *MockFileWatcher
}

// NewMockFileWatcher creates a new mock instance.
func NewMockFileWatcher(ctrl *gomock.Controller) *MockFileWatcher {
	mock := &MockFileWatcher{ctrl: ctrl}
	mock.recorder = &MockFileWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileWatcher) EXPECT() *MockFileWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockFileWatcher) Changes() <-chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan bool)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockFileWatcherMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockFileWatcher)(nil).Changes))
}

// Kill mocks base method.
func (m *MockFileWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockFileWatcherMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockFileWatcher)(nil).Kill))
}

// Wait mocks base method.
func (m *MockFileWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockFileWatcherMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockFileWatcher)(nil).Wait))
}
