// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/changestream/stream (interfaces: FileNotifier)

// Package stream is a generated GoMock package.
package stream

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileNotifier is a mock of FileNotifier interface.
type MockFileNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockFileNotifierMockRecorder
}

// MockFileNotifierMockRecorder is the mock recorder for MockFileNotifier.
type MockFileNotifierMockRecorder struct {
	mock *MockFileNotifier
}

// NewMockFileNotifier creates a new mock instance.
func NewMockFileNotifier(ctrl *gomock.Controller) *MockFileNotifier {
	mock := &MockFileNotifier{ctrl: ctrl}
	mock.recorder = &MockFileNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileNotifier) EXPECT() *MockFileNotifierMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockFileNotifier) Changes() (<-chan bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Changes indicates an expected call of Changes.
func (mr *MockFileNotifierMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockFileNotifier)(nil).Changes))
}
