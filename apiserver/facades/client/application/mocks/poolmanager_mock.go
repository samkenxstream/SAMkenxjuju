// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/storage/poolmanager (interfaces: PoolManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/juju/juju/storage"
)

// MockPoolManager is a mock of PoolManager interface.
type MockPoolManager struct {
	ctrl     *gomock.Controller
	recorder *MockPoolManagerMockRecorder
}

// MockPoolManagerMockRecorder is the mock recorder for MockPoolManager.
type MockPoolManagerMockRecorder struct {
	mock *MockPoolManager
}

// NewMockPoolManager creates a new mock instance.
func NewMockPoolManager(ctrl *gomock.Controller) *MockPoolManager {
	mock := &MockPoolManager{ctrl: ctrl}
	mock.recorder = &MockPoolManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolManager) EXPECT() *MockPoolManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPoolManager) Create(arg0 string, arg1 storage.ProviderType, arg2 map[string]interface{}) (*storage.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*storage.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPoolManagerMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPoolManager)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockPoolManager) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPoolManagerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPoolManager)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockPoolManager) Get(arg0 string) (*storage.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*storage.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPoolManagerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPoolManager)(nil).Get), arg0)
}

// List mocks base method.
func (m *MockPoolManager) List() ([]*storage.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*storage.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPoolManagerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPoolManager)(nil).List))
}

// Replace mocks base method.
func (m *MockPoolManager) Replace(arg0, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockPoolManagerMockRecorder) Replace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockPoolManager)(nil).Replace), arg0, arg1, arg2)
}
