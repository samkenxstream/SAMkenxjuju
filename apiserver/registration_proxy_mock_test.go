// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/proxy (interfaces: Proxier)

// Package apiserver_test is a generated GoMock package.
package apiserver_test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProxier is a mock of Proxier interface.
type MockProxier struct {
	ctrl     *gomock.Controller
	recorder *MockProxierMockRecorder
}

// MockProxierMockRecorder is the mock recorder for MockProxier.
type MockProxierMockRecorder struct {
	mock *MockProxier
}

// NewMockProxier creates a new mock instance.
func NewMockProxier(ctrl *gomock.Controller) *MockProxier {
	mock := &MockProxier{ctrl: ctrl}
	mock.recorder = &MockProxierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxier) EXPECT() *MockProxierMockRecorder {
	return m.recorder
}

// Insecure mocks base method.
func (m *MockProxier) Insecure() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Insecure")
}

// Insecure indicates an expected call of Insecure.
func (mr *MockProxierMockRecorder) Insecure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insecure", reflect.TypeOf((*MockProxier)(nil).Insecure))
}

// MarshalYAML mocks base method.
func (m *MockProxier) MarshalYAML() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalYAML")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalYAML indicates an expected call of MarshalYAML.
func (mr *MockProxierMockRecorder) MarshalYAML() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalYAML", reflect.TypeOf((*MockProxier)(nil).MarshalYAML))
}

// RawConfig mocks base method.
func (m *MockProxier) RawConfig() (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawConfig")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawConfig indicates an expected call of RawConfig.
func (mr *MockProxierMockRecorder) RawConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawConfig", reflect.TypeOf((*MockProxier)(nil).RawConfig))
}

// Start mocks base method.
func (m *MockProxier) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProxierMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProxier)(nil).Start))
}

// Stop mocks base method.
func (m *MockProxier) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockProxierMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProxier)(nil).Stop))
}

// Type mocks base method.
func (m *MockProxier) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockProxierMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockProxier)(nil).Type))
}
